// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
	using Eco.Gameplay.Auth;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
	using Eco.Gameplay.Interactions.Interactors;
    using Eco.Gameplay.Items;
	using Eco.Gameplay.Items.Recipes;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Occupancy;
	using Eco.Gameplay.Placement;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
	using Eco.Gameplay.Systems.NewTooltip;
	using Eco.Shared.IoC;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
	using Eco.Shared.SharedTypes;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Shared.Networking;
    using Eco.World.Blocks;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
	using Eco.Gameplay.Components.Storage;

    using Eco.Gameplay.Items.Recipes;

    [Serialized]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(MinimapComponent))]
    [RequireComponent(typeof(LinkComponent))]
    [RequireComponent(typeof(CraftingComponent))]
    [RequireComponent(typeof(PluginModulesComponent))]
    [RequireComponent(typeof(ForSaleComponent))]
    [Tag("Usable")]
    [Ecopedia("Work Stations", "Craft Tables", subPageName: "CropGreenhouse Item")]
    public partial class CropGreenhouseObject : WorldObject, IRepresentsItem, IHasInteractions
    {
        [Serialized] public bool OpenDoors { get; set; }
        public virtual Type RepresentedItemType => typeof(CropGreenhouseItem);
        public override LocString DisplayName => Localizer.DoStr("Crop Greenhouse");
        public override TableTextureMode TableTexture => TableTextureMode.Brick;
		static CropGreenhouseObject() 
		{
            var BlockOccupancyList = new List<BlockOccupancy>
            {
                #region Occupancy
//////////////////////////////////////5x5x13//////////////////////////////////////


			new BlockOccupancy(new Vector3i(0, 0, 0)),
            new BlockOccupancy(new Vector3i(1, 0, 0)),
            new BlockOccupancy(new Vector3i(2, 0, 0)),
            new BlockOccupancy(new Vector3i(3, 0, 0)),
            new BlockOccupancy(new Vector3i(4, 0, 0)),
		
            new BlockOccupancy(new Vector3i(0, 0, 1)),
            new BlockOccupancy(new Vector3i(1, 0, 1)),
            new BlockOccupancy(new Vector3i(2, 0, 1)),
            new BlockOccupancy(new Vector3i(3, 0, 1)),
            new BlockOccupancy(new Vector3i(4, 0, 1)),

			new BlockOccupancy(new Vector3i(0, 0, 2)),
            new BlockOccupancy(new Vector3i(1, 0, 2)),
            new BlockOccupancy(new Vector3i(2, 0, 2)),
            new BlockOccupancy(new Vector3i(3, 0, 2)),
            new BlockOccupancy(new Vector3i(4, 0, 2)),

			new BlockOccupancy(new Vector3i(0, 0, 3)),
            new BlockOccupancy(new Vector3i(1, 0, 3)),
            new BlockOccupancy(new Vector3i(2, 0, 3)),
            new BlockOccupancy(new Vector3i(3, 0, 3)),
            new BlockOccupancy(new Vector3i(4, 0, 3)),

			new BlockOccupancy(new Vector3i(0, 0, 4)),
            new BlockOccupancy(new Vector3i(1, 0, 4)),
            new BlockOccupancy(new Vector3i(2, 0, 4)),
            new BlockOccupancy(new Vector3i(3, 0, 4)),
            new BlockOccupancy(new Vector3i(4, 0, 4)),

			new BlockOccupancy(new Vector3i(0, 0, 5)),
            new BlockOccupancy(new Vector3i(1, 0, 5)),
            new BlockOccupancy(new Vector3i(2, 0, 5)),
            new BlockOccupancy(new Vector3i(3, 0, 5)),
            new BlockOccupancy(new Vector3i(4, 0, 5)),

			new BlockOccupancy(new Vector3i(0, 0, 6)),
            new BlockOccupancy(new Vector3i(1, 0, 6)),
            new BlockOccupancy(new Vector3i(2, 0, 6)),
            new BlockOccupancy(new Vector3i(3, 0, 6)),
            new BlockOccupancy(new Vector3i(4, 0, 6)),

			new BlockOccupancy(new Vector3i(0, 0, 7)),
            new BlockOccupancy(new Vector3i(1, 0, 7)),
            new BlockOccupancy(new Vector3i(2, 0, 7)),
            new BlockOccupancy(new Vector3i(3, 0, 7)),
            new BlockOccupancy(new Vector3i(4, 0, 7)),

			new BlockOccupancy(new Vector3i(0, 0, 8)),
            new BlockOccupancy(new Vector3i(1, 0, 8)),
            new BlockOccupancy(new Vector3i(2, 0, 8)),
            new BlockOccupancy(new Vector3i(3, 0, 8)),
            new BlockOccupancy(new Vector3i(4, 0, 8)),

			new BlockOccupancy(new Vector3i(0, 0, 9)),
            new BlockOccupancy(new Vector3i(1, 0, 9)),
            new BlockOccupancy(new Vector3i(2, 0, 9)),
            new BlockOccupancy(new Vector3i(3, 0, 9)),
            new BlockOccupancy(new Vector3i(4, 0, 9)),

			new BlockOccupancy(new Vector3i(0, 0, 10)),
            new BlockOccupancy(new Vector3i(1, 0, 10)),
            new BlockOccupancy(new Vector3i(2, 0, 10)),
            new BlockOccupancy(new Vector3i(3, 0, 10)),
            new BlockOccupancy(new Vector3i(4, 0, 10)),

			new BlockOccupancy(new Vector3i(0, 0, 11)),
            new BlockOccupancy(new Vector3i(1, 0, 11)),
            new BlockOccupancy(new Vector3i(2, 0, 11)),
            new BlockOccupancy(new Vector3i(3, 0, 11)),
            new BlockOccupancy(new Vector3i(4, 0, 11)),

			new BlockOccupancy(new Vector3i(0, 0, 12)),
            new BlockOccupancy(new Vector3i(1, 0, 12)),
            new BlockOccupancy(new Vector3i(2, 0, 12)),
            new BlockOccupancy(new Vector3i(3, 0, 12)),
            new BlockOccupancy(new Vector3i(4, 0, 12)),
			
//////////////////////////////////////5x4x13Back//////////////////////////////////////

			new BlockOccupancy(new Vector3i(0, 1, 0)),
            new BlockOccupancy(new Vector3i(1, 1, 0)),
            new BlockOccupancy(new Vector3i(2, 1, 0)),
            new BlockOccupancy(new Vector3i(3, 1, 0)),
            new BlockOccupancy(new Vector3i(4, 1, 0)),
		
            new BlockOccupancy(new Vector3i(0, 1, 1)),
            new BlockOccupancy(new Vector3i(1, 1, 1)),
            new BlockOccupancy(new Vector3i(2, 1, 1)),
            new BlockOccupancy(new Vector3i(3, 1, 1)),
            new BlockOccupancy(new Vector3i(4, 1, 1)),

			new BlockOccupancy(new Vector3i(0, 1, 2)),
            new BlockOccupancy(new Vector3i(1, 1, 2)),
            new BlockOccupancy(new Vector3i(2, 1, 2)),
            new BlockOccupancy(new Vector3i(3, 1, 2)),
            new BlockOccupancy(new Vector3i(4, 1, 2)),

			new BlockOccupancy(new Vector3i(0, 1, 3)),
            new BlockOccupancy(new Vector3i(1, 1, 3)),
            new BlockOccupancy(new Vector3i(2, 1, 3)),
            new BlockOccupancy(new Vector3i(3, 1, 3)),
            new BlockOccupancy(new Vector3i(4, 1, 3)),

			new BlockOccupancy(new Vector3i(0, 1, 4)),
            new BlockOccupancy(new Vector3i(1, 1, 4)),
            new BlockOccupancy(new Vector3i(2, 1, 4)),
            new BlockOccupancy(new Vector3i(3, 1, 4)),
            new BlockOccupancy(new Vector3i(4, 1, 4)),

			new BlockOccupancy(new Vector3i(0, 1, 5)),
            new BlockOccupancy(new Vector3i(1, 1, 5)),
            new BlockOccupancy(new Vector3i(2, 1, 5)),
            new BlockOccupancy(new Vector3i(3, 1, 5)),
            new BlockOccupancy(new Vector3i(4, 1, 5)),

			new BlockOccupancy(new Vector3i(0, 1, 6)),
            new BlockOccupancy(new Vector3i(1, 1, 6)),
            new BlockOccupancy(new Vector3i(2, 1, 6)),
            new BlockOccupancy(new Vector3i(3, 1, 6)),
            new BlockOccupancy(new Vector3i(4, 1, 6)),

			new BlockOccupancy(new Vector3i(0, 1, 7)),
            new BlockOccupancy(new Vector3i(1, 1, 7)),
            new BlockOccupancy(new Vector3i(2, 1, 7)),
            new BlockOccupancy(new Vector3i(3, 1, 7)),
            new BlockOccupancy(new Vector3i(4, 1, 7)),

			new BlockOccupancy(new Vector3i(0, 1, 8)),
            new BlockOccupancy(new Vector3i(1, 1, 8)),
            new BlockOccupancy(new Vector3i(2, 1, 8)),
            new BlockOccupancy(new Vector3i(3, 1, 8)),
            new BlockOccupancy(new Vector3i(4, 1, 8)),

			new BlockOccupancy(new Vector3i(0, 1, 9)),
            new BlockOccupancy(new Vector3i(1, 1, 9)),
            new BlockOccupancy(new Vector3i(2, 1, 9)),
            new BlockOccupancy(new Vector3i(3, 1, 9)),
            new BlockOccupancy(new Vector3i(4, 1, 9)),

			new BlockOccupancy(new Vector3i(0, 1, 10)),
            new BlockOccupancy(new Vector3i(1, 1, 10)),
            new BlockOccupancy(new Vector3i(2, 1, 10)),
            new BlockOccupancy(new Vector3i(3, 1, 10)),
            new BlockOccupancy(new Vector3i(4, 1, 10)),

			new BlockOccupancy(new Vector3i(0, 1, 11)),
            new BlockOccupancy(new Vector3i(1, 1, 11)),
            new BlockOccupancy(new Vector3i(2, 1, 11)),
            new BlockOccupancy(new Vector3i(3, 1, 11)),
            new BlockOccupancy(new Vector3i(4, 1, 11)),

			new BlockOccupancy(new Vector3i(0, 1, 12)),
            new BlockOccupancy(new Vector3i(1, 1, 12)),
            new BlockOccupancy(new Vector3i(2, 1, 12)),
            new BlockOccupancy(new Vector3i(3, 1, 12)),
            new BlockOccupancy(new Vector3i(4, 1, 12)),
			
//////////////////////////////////////5x4x13Back//////////////////////////////////////

			new BlockOccupancy(new Vector3i(0, 2, 0)),
            new BlockOccupancy(new Vector3i(1, 2, 0)),
            new BlockOccupancy(new Vector3i(2, 2, 0)),
            new BlockOccupancy(new Vector3i(3, 2, 0)),
            new BlockOccupancy(new Vector3i(4, 2, 0)),
		
            new BlockOccupancy(new Vector3i(0, 2, 1)),
            new BlockOccupancy(new Vector3i(1, 2, 1)),
            new BlockOccupancy(new Vector3i(2, 2, 1)),
            new BlockOccupancy(new Vector3i(3, 2, 1)),
            new BlockOccupancy(new Vector3i(4, 2, 1)),

			new BlockOccupancy(new Vector3i(0, 2, 2)),
            new BlockOccupancy(new Vector3i(1, 2, 2)),
            new BlockOccupancy(new Vector3i(2, 2, 2)),
            new BlockOccupancy(new Vector3i(3, 2, 2)),
            new BlockOccupancy(new Vector3i(4, 2, 2)),

			new BlockOccupancy(new Vector3i(0, 2, 3)),
            new BlockOccupancy(new Vector3i(1, 2, 3)),
            new BlockOccupancy(new Vector3i(2, 2, 3)),
            new BlockOccupancy(new Vector3i(3, 2, 3)),
            new BlockOccupancy(new Vector3i(4, 2, 3)),

			new BlockOccupancy(new Vector3i(0, 2, 4)),
            new BlockOccupancy(new Vector3i(1, 2, 4)),
            new BlockOccupancy(new Vector3i(2, 2, 4)),
            new BlockOccupancy(new Vector3i(3, 2, 4)),
            new BlockOccupancy(new Vector3i(4, 2, 4)),

			new BlockOccupancy(new Vector3i(0, 2, 5)),
            new BlockOccupancy(new Vector3i(1, 2, 5)),
            new BlockOccupancy(new Vector3i(2, 2, 5)),
            new BlockOccupancy(new Vector3i(3, 2, 5)),
            new BlockOccupancy(new Vector3i(4, 2, 5)),

			new BlockOccupancy(new Vector3i(0, 2, 6)),
            new BlockOccupancy(new Vector3i(1, 2, 6)),
            new BlockOccupancy(new Vector3i(2, 2, 6)),
            new BlockOccupancy(new Vector3i(3, 2, 6)),
            new BlockOccupancy(new Vector3i(4, 2, 6)),

			new BlockOccupancy(new Vector3i(0, 2, 7)),
            new BlockOccupancy(new Vector3i(1, 2, 7)),
            new BlockOccupancy(new Vector3i(2, 2, 7)),
            new BlockOccupancy(new Vector3i(3, 2, 7)),
            new BlockOccupancy(new Vector3i(4, 2, 7)),

			new BlockOccupancy(new Vector3i(0, 2, 8)),
            new BlockOccupancy(new Vector3i(1, 2, 8)),
            new BlockOccupancy(new Vector3i(2, 2, 8)),
            new BlockOccupancy(new Vector3i(3, 2, 8)),
            new BlockOccupancy(new Vector3i(4, 2, 8)),

			new BlockOccupancy(new Vector3i(0, 2, 9)),
            new BlockOccupancy(new Vector3i(1, 2, 9)),
            new BlockOccupancy(new Vector3i(2, 2, 9)),
            new BlockOccupancy(new Vector3i(3, 2, 9)),
            new BlockOccupancy(new Vector3i(4, 2, 9)),

			new BlockOccupancy(new Vector3i(0, 2, 10)),
            new BlockOccupancy(new Vector3i(1, 2, 10)),
            new BlockOccupancy(new Vector3i(2, 2, 10)),
            new BlockOccupancy(new Vector3i(3, 2, 10)),
            new BlockOccupancy(new Vector3i(4, 2, 10)),

			new BlockOccupancy(new Vector3i(0, 2, 11)),
            new BlockOccupancy(new Vector3i(1, 2, 11)),
            new BlockOccupancy(new Vector3i(2, 2, 11)),
            new BlockOccupancy(new Vector3i(3, 2, 11)),
            new BlockOccupancy(new Vector3i(4, 2, 11)),

			new BlockOccupancy(new Vector3i(0, 2, 12)),
            new BlockOccupancy(new Vector3i(1, 2, 12)),
            new BlockOccupancy(new Vector3i(2, 2, 12)),
            new BlockOccupancy(new Vector3i(3, 2, 12)),
            new BlockOccupancy(new Vector3i(4, 2, 12)),
			
//////////////////////////////////////5x4x13Back//////////////////////////////////////

			new BlockOccupancy(new Vector3i(0, 3, 0)),
            new BlockOccupancy(new Vector3i(1, 3, 0)),
            new BlockOccupancy(new Vector3i(2, 3, 0)),
            new BlockOccupancy(new Vector3i(3, 3, 0)),
            new BlockOccupancy(new Vector3i(4, 3, 0)),

            new BlockOccupancy(new Vector3i(0, 3, 1)),
            new BlockOccupancy(new Vector3i(1, 3, 1)),
            new BlockOccupancy(new Vector3i(2, 3, 1)),
            new BlockOccupancy(new Vector3i(3, 3, 1)),
            new BlockOccupancy(new Vector3i(4, 3, 1)),

			new BlockOccupancy(new Vector3i(0, 3, 2)),
            new BlockOccupancy(new Vector3i(1, 3, 2)),
            new BlockOccupancy(new Vector3i(2, 3, 2)),
            new BlockOccupancy(new Vector3i(3, 3, 2)),
            new BlockOccupancy(new Vector3i(4, 3, 2)),

			new BlockOccupancy(new Vector3i(0, 3, 3)),
            new BlockOccupancy(new Vector3i(1, 3, 3)),
            new BlockOccupancy(new Vector3i(2, 3, 3)),
            new BlockOccupancy(new Vector3i(3, 3, 3)),
            new BlockOccupancy(new Vector3i(4, 3, 3)),

			new BlockOccupancy(new Vector3i(0, 3, 4)),
            new BlockOccupancy(new Vector3i(1, 3, 4)),
            new BlockOccupancy(new Vector3i(2, 3, 4)),
            new BlockOccupancy(new Vector3i(3, 3, 4)),
            new BlockOccupancy(new Vector3i(4, 3, 4)),

			new BlockOccupancy(new Vector3i(0, 3, 5)),
            new BlockOccupancy(new Vector3i(1, 3, 5)),
            new BlockOccupancy(new Vector3i(2, 3, 5)),
            new BlockOccupancy(new Vector3i(3, 3, 5)),
            new BlockOccupancy(new Vector3i(4, 3, 5)),

			new BlockOccupancy(new Vector3i(0, 3, 6)),
            new BlockOccupancy(new Vector3i(1, 3, 6)),
            new BlockOccupancy(new Vector3i(2, 3, 6)),
            new BlockOccupancy(new Vector3i(3, 3, 6)),
            new BlockOccupancy(new Vector3i(4, 3, 6)),

			new BlockOccupancy(new Vector3i(0, 3, 7)),
            new BlockOccupancy(new Vector3i(1, 3, 7)),
            new BlockOccupancy(new Vector3i(2, 3, 7)),
            new BlockOccupancy(new Vector3i(3, 3, 7)),
            new BlockOccupancy(new Vector3i(4, 3, 7)),

			new BlockOccupancy(new Vector3i(0, 3, 8)),
            new BlockOccupancy(new Vector3i(1, 3, 8)),
            new BlockOccupancy(new Vector3i(2, 3, 8)),
            new BlockOccupancy(new Vector3i(3, 3, 8)),
            new BlockOccupancy(new Vector3i(4, 3, 8)),

			new BlockOccupancy(new Vector3i(0, 3, 9)),
            new BlockOccupancy(new Vector3i(1, 3, 9)),
            new BlockOccupancy(new Vector3i(2, 3, 9)),
            new BlockOccupancy(new Vector3i(3, 3, 9)),
            new BlockOccupancy(new Vector3i(4, 3, 9)),

			new BlockOccupancy(new Vector3i(0, 3, 10)),
            new BlockOccupancy(new Vector3i(1, 3, 10)),
            new BlockOccupancy(new Vector3i(2, 3, 10)),
            new BlockOccupancy(new Vector3i(3, 3, 10)),
            new BlockOccupancy(new Vector3i(4, 3, 10)),

			new BlockOccupancy(new Vector3i(0, 3, 11)),
            new BlockOccupancy(new Vector3i(1, 3, 11)),
            new BlockOccupancy(new Vector3i(2, 3, 11)),
            new BlockOccupancy(new Vector3i(3, 3, 11)),
            new BlockOccupancy(new Vector3i(4, 3, 11)),

			new BlockOccupancy(new Vector3i(0, 3, 12)),
            new BlockOccupancy(new Vector3i(1, 3, 12)),
            new BlockOccupancy(new Vector3i(2, 3, 12)),
            new BlockOccupancy(new Vector3i(3, 3, 12)),
            new BlockOccupancy(new Vector3i(4, 3, 12)),
			#endregion
//////////////////////////////////////5x5x13Back//////////////////////////////////////
			};

            AddOccupancy<CropGreenhouseObject>(BlockOccupancyList);
		} 

        protected override void Initialize()
        {
            this.ModsPreInitialize();
            this.GetComponent<MinimapComponent>().SetCategory(Localizer.DoStr("Crafting"));

            this.ModsPostInitialize();
        }
        

        [Interaction(InteractionTrigger.RightClick, "Open Door")]
        public void OpenDoor(Player context, InteractionTriggerInfo interactionTriggerInfo, InteractionTarget interactionTarget)
        {
            var isAuthorized = ServiceHolder<IAuthManager>.Obj.IsAuthorized(this, context.User);

            if (isAuthorized)
            {
                OpenDoors = !OpenDoors;
            }
            else
            {
                context.ErrorLocStr("You Are Not Authorized To Do That");
                return;
            }
        }

        public override void Tick()
        {
            base.Tick();
            SetAnimatedState("OpenDoor", OpenDoors);
        }

        /// <summary>Hook for mods to customize WorldObject before initialization. You can change housing values here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize WorldObject after initialization.</summary>
        partial void ModsPostInitialize();
    }

    [Serialized]
    [LocDisplayName("Crop Greenhouse")]
    [LocDescription("Greenhouse for farming larger amounts of crops quickly.")]
    [IconGroup("World Object Minimap")]
    [Ecopedia("Work Stations", "Craft Tables", createAsSubPage: true)]
    [Tag("Crafting Table")]
    [Weight(5000)] // Defines how heavy CropGreenhouse is.
	[MaxStackSize(200)]
    [AllowPluginModules(Tags = new[] { "AdvancedUpgrade" }, ItemTypes = new[] {})] //noloc
    public partial class CropGreenhouseItem : WorldObjectItem<CropGreenhouseObject>, IPersistentData
    {
        protected override OccupancyContext GetOccupancyContext => new SideAttachedContext( 0  | DirectionAxisFlags.Down , WorldObject.GetOccupancyInfo(this.WorldObjectType));



        [Serialized, SyncToView, NewTooltipChildren(CacheAs.Instance, flags: TTFlags.AllowNonControllerTypeForChildren)] public object PersistentData { get; set; }
    }

    /// <summary>
    /// <para>Server side recipe definition for "CropGreenhouse".</para>
    /// <para>More information about RecipeFamily objects can be found at https://docs.play.eco/api/server/eco.gameplay/Eco.Gameplay.Items.RecipeFamily.html</para>
    /// </summary>
    [RequiresSkill(typeof(CarpentrySkill), 6)]
    [Ecopedia("Work Stations", "Craft Tables", subPageName: "CropGreenhouse Item")]
    public partial class CropGreenhouseRecipe : RecipeFamily
    {
        public CropGreenhouseRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "CropGreenhouse",  //noloc
                displayName: Localizer.DoStr("Crop Greenhouse"),

                // Defines the ingredients needed to craft this recipe. An ingredient items takes the following inputs
                // type of the item, the amount of the item, the skill required, and the talent used.
                ingredients: new List<IngredientElement>
                {
					new IngredientElement(typeof(GlassItem), 80, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                    new IngredientElement(typeof(NailItem), 60, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                    new IngredientElement("Lumber", 40, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)), //noloc
                },

                // Define our recipe output items.
                // For every output item there needs to be one CraftingElement entry with the type of the final item and the amount
                // to create.
                items: new List<CraftingElement>
                {
                    new CraftingElement<CropGreenhouseItem>()
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 5; // Defines how much experience is gained when crafted.
            
            // Defines the amount of labor required and the required skill to add labor
            this.LaborInCalories = CreateLaborInCaloriesValue(2000, typeof(CarpentrySkill));

            // Defines our crafting time for the recipe
            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(CropGreenhouseRecipe), start: 10, skillType: typeof(CarpentrySkill), typeof(CarpentryFocusedSpeedTalent), typeof(CarpentryParallelSpeedTalent));

            // Perform pre/post initialization for user mods and initialize our recipe instance with the display name "Crop Greenhouse"
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Crop Greenhouse"), recipeType: typeof(CropGreenhouseRecipe));
            this.ModsPostInitialize();

            // Register our RecipeFamily instance with the crafting system so it can be crafted.
            CraftingComponent.AddRecipe(tableType: typeof(CarpentryTableObject), recipe: this);
        }

        /// <summary>Hook for mods to customize RecipeFamily before initialization. You can change recipes, xp, labor, time here.</summary>
        partial void ModsPreInitialize();

        /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
        partial void ModsPostInitialize();
    }
}
